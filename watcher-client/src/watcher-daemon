#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
import sys
sys.path.append('/usr/share/pyshared')
import argparse
import pydaemon
import os
import multiprocessing
import subprocess

from watcher_client.watcher_agent import watcher_agent
from watcher_client.watcher_tcpoutfiles import watcher_tcpoutfiles


class ExampleDaemon(pydaemon.Daemon):

    def __init__(self):
        cwd = '/var/log/watcher-client/'
        self.stdin = '/dev/null'
        self.stdout = os.path.join(cwd, 'watcher-client.log')
        self.stderr = os.path.join(cwd, 'watcher-client-error.log')
        self.pidfile = os.path.join('/var/run/', 'watcher-client.pid')

    def run(self):
        while True:
            procs = []
            procs.append(
                multiprocessing.Process(target=watcher_tcpoutfiles, args=()))
            for i in range(len(procs)):
                # procs[i].daemon = True
                procs[i].start()
            watcher_agent()
            for i in range(len(procs)):
                procs[i].join()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='watcher-client',
                                     epilog='That\'s all folks')

    parser.add_argument('operation',
                        metavar='OPERATION',
                        type=str,
                        help='Operation with daemon. Accepts any of these values: start, stop, restart, status',
                        choices=['start', 'stop', 'restart', 'status'])
    args = parser.parse_args()
    operation = args.operation

    # Daemon
    daemon = ExampleDaemon()

    if operation == 'start':
        print("Starting daemon")
        daemon.start()
        pid = daemon.get_pid()

        if not pid:
            print("Unable run daemon")
        else:
            print("Daemon is running [PID=%d]" % pid)

    elif operation == 'stop':
        print("Stoping daemon")
        daemon.stop()
        process = subprocess.Popen("ps aux | grep [w]atcher-daemon | awk '{print $2}' | xargs kill -9 ; rm /var/run/watcher-client.pid 2>/dev/null",
                             shell=True,
                             stdout=subprocess.PIPE,
                           )
        process.communicate()

    elif operation == 'restart':
        print("Restarting daemon")
        daemon.restart()

    elif operation == 'status':
        print("Viewing daemon status")
        pid = daemon.get_pid()

        if not pid:
            print("Daemon isn't running ;)")
        else:
            print("Daemon is running [PID=%d]" % pid)
    sys.exit(0)
